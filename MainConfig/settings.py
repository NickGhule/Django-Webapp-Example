"""
Django settings for MainConfig project. Generated by 'django-admin startproject' using Django 2.0.

Info: https://docs.djangoproject.com/en/2.0/topics/settings/
Settings and values: https://docs.djangoproject.com/en/2.0/ref/settings/
Quick-start development settings - unsuitable for production: https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

YOU MUST SET THE DATABASE_URL ENVIRONMENT VARIABLE
"""
import os
import sys
import django_heroku
from celery.schedules import crontab

# django.setup() #If you’re using Django in a plain Python script — rather than a management command — and you rely on the DJANGO_SETTINGS_MODULE environment variable, you must now explicitly initialize Django at the beginning of your script with

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
### ~ SECURITY WARNING: Keep the secret key used in production secret! ~ ####
if "SECRET_KEY" in os.environ:
    SECRET_KEY = os.environ.get('SECRET_KEY')
else:
    print("Please enter the secret key as an environmental variable. Use export or heroku config:set SECRET_KEY=")
    sys.exit(1)

#### ~ SECURITY WARNING: Don't run with debug turned on in production! ~ ####
OS_DEBUG = os.environ.get('DEBUG_MODE')

if OS_DEBUG and OS_DEBUG == "True": # No true booleans in bash. Note: do this in Heroku config:set
    print("~ Debug is enabled. ~")
    DEBUG = True
else:
    DEBUG = False
#### ~ SECURITY WARNING: Don't run with debug turned on in production! ~ ####

ALLOWED_HOSTS = ['www.contextify.io', 'localhost']


################################################################################

INSTALLED_APPS = [                                      # Application definition
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    'tastypie',
    'django_celery_results',
    'celery',
    # 'django_celery_beat',
    'webapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware'
]

ROOT_URLCONF = 'MainConfig.urls'                           # Location of urls.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'webapp/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MainConfig.wsgi.application'           # Location of wsgi.py

IMPORT_EXPORT_USE_TRANSACTIONS = True                      # For CSVs data import

# Database - https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# When running local, change the 'local' key to 'default' and the 'default' one to 'web' (and vice versa after)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Options: 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': os.environ.get('DB_NAME'),                  # Note: it is not 'django-db', what we need is called Database
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': '5432',                                     # Set to empty string for default
        },
    'local': {                                              # USER, PASSWORD, HOST, PORT not used with sqlite3. Empty string HOST is localhost
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),       # Or path to database file if using sqlite3
        'HOST': '',
    }
}

# Docs: https://devcenter.heroku.com/articles/heroku-redis
CACHES = {
    "default": {
        "BACKEND": "redis_cache.RedisCache",
        "LOCATION": os.environ.get('REDIS_URL'),
    }
}


# Password validation - https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},]

################################################################################


# Internationalization - https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Ensenada' #UTC-7
USE_I18N = True
USE_L10N = True
USE_TZ = True
DEFAULT_FROM_EMAIL = 'alec@contextify.io'

# Static files (CSS, JavaScript, Images) - https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/'

# Auth Settings. Log in and out default urls. You can call these from the HTML.
LOGIN_URL = '/accounts/login/'   # Note: this is the default anyways. This shortcut allows to redirect to it from the HTML
LOGOUT_URL = '/accounts/logout/' # Note: this is NOT the default.
LOGIN_REDIRECT_URL = '/'         # i.e. the home page
LOGOUT_REDIRECT_URL = '/'

# Celery Task Queue Settings
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'     # Note: Pickle Serializers have remote code execution vulernabilites. This build does not use them.
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE          # Inherits from above
CELERY_TASK_SOFT_TIME_LIMIT = 300    # Can be individually overwritten. In seconds.

# REDIS/CELERY Settings
CELERY_BROKER_URL = os.environ['REDIS_URL']
CELERY_RESULT_BACKEND = os.environ['REDIS_URL']
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600, "max_connections": 2} # TODO appears to not be applying this setting
CELERY_REDIS_MAX_CONNECTIONS = 5
CELERY_DEFAULT_QUEUE = 'default'
# CELERY_ALWAYS_EAGER

# CELERY_BEAT_SCHEDULE = {                        # {}
#     'task-number-one': {
#         'task': 'webapp.tasks.task_number_one',
#         'schedule': crontab(minute=59, hour=8)
#         # 'schedule': 30.0, # to run every 30 s
#     },
#     'task-number-three': {
#         'task': 'webapp.tasks.task_number_three',
#         'schedule': crontab(minute=0, hour='*/12,10-19')
#     }
# }


# Email Settings. Overview here: https://code.tutsplus.com/tutorials/using-celery-with-django-for-background-task-processing--cms-28732
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587                        # TLS -> 587. SSL -> 465.
EMAIL_HOST_USER = DEFAULT_FROM_EMAIL    # Inherits from above
EMAIL_HOST_PASSWORD = os.environ['EMAIL_PASS']

# SSL / HSTS Security Settings.
PREPEND_WWW = True
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 60 # Some documents indicate it should be 31536000. Set to 60 for now for debugging purposes
SECURE_HSTS_INCLUDE_SUBDOMAINS = False

ROLLBAR = {
    'access_token': os.environ['ROLLBAR_ACCESS_TOKEN'],
    'environment': 'development' if DEBUG else 'production',
    'branch': 'master',
    'root': os.getcwd(),
}

EASTER_EGG = "EasterEgg10"

django_heroku.settings(locals())
